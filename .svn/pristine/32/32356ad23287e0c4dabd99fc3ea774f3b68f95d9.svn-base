class Con {
    constructor(options) {
        this.url = options.url;
        this.intro = options.intro;
        this.load();

    }
    load() {
        var that = this;
        ajaxGet(this.url, function (res) {
            that.res = JSON.parse(res);
            // console.log(that.res);
            that.getCookie();
        })
    }
    getCookie() {
        // this.goodss = getCookie("goodss") ? JSON.parse(getCookie("goodss")) : [];
        this.goodss = getCookie("goodss") ? JSON.parse(getCookie("goodss")) : [];
        this.display();
    }
    display() {
        var str = "";
        var str1 = "";
        for (var i = 0; i < this.res.length; i++) {
            if (this.res[i].goodsId === this.goodss[0].index) {
                // console.log(this.goodss[0].index);
                str = `<div class="fl fangda">
                <div class="photo">
                    <div class="photo-l" id="wrap">
                        <img class="ts" src="${this.res[i].img}" >
                        <div class="kong" id="box"></div>
                    </div>
                    <div class="photo-r" id="bigerea" style="background-image: url(${this.res[i].img});">
                    </div>
                </div>
                <div class="send">
                    <img src="images/ts1.jpg">
                    <img src="images/gb.jpg">
                    <img src="images/count_02.jpg">
                    <img src="images/ts3.jpg">
                    <img src="images/count_04.jpg">
                    <img src="images/gb.jpg">
                </div>
            </div>
            <div class="detail fl" index="${this.res[i].goodsId}">
                <div class="name d1">${this.res[i].name}</div>
                <div class="vipprice d1">现价：<span>${this.res[i].vipprice}</span>元</div>
                <div class="price d1">定价：￥<span>${this.res[i].price}</span></div>
                <div class="zhe d1"><span>折扣：<b>${(this.res[i].vipprice / this.res[i].price).toFixed(2)}</b>折</span><em>节省：￥<b>${(this.res[i].price - this.res[i].vipprice).toFixed(2)}</b>元</em></div>
                <div class="stock d1">库存：${this.res[i].stock}</div>
                <div class="line" id="line"></div>
                <div class="writer">
                    <div class="wname d1"><span>作者：杨帆</span><em>出生日期：2012/2/2</em></div>
                    <div class="chu d1"><span>出版社：三位数</span><em>页数：</em></div>
                    <div class="isbn d1"><span>ISBN：212345432</span><em>装帧：</em></div>
                    <div class="kai d1"><span>开本：16开</span><em>字数：</em></div>
                </div>
                <div class="mai">
                    <div class="mai-t">
                        我要买：
                        <input type="image" src="images/count_04.jpg" class="tu up" name="up" >
                        <input type="text" value="${this.goodss[0].sum}" class="txt">
                        <input type="image" src="images/count_02.jpg" class="tu down" name="down">    
                        件
                    </div>
                    <div class="mai-b clear">
                        <a href="shopcar.html" class="m1">立即购买</a>
                        <a href="#" class="m2">&nbsp;&nbsp;&nbsp;&nbsp;加入收藏夹</a>
                    </div>
                </div>
            </div>
                `;
            }
        }
        this.intro.innerHTML = str;
        this.fa();
        this.addEvent();
    }
    fa() {
        var wrap = document.getElementById("wrap");
        var box = document.querySelector("#box");
        var bigArea = document.getElementById("bigerea");
        wrap.onmouseenter = function () {
            box.style.display = "block";
            bigArea.style.display = "block";
            // var r = box.clientWidth / bigArea.clientWidth;
            var r = (wrap.clientWidth - box.clientWidth) / (450 - bigArea.clientWidth);
            // 绑定mousemove事件
            document.onmousemove = function (e) {
                // 计算鼠标在页面中的距离
                var mouseX = e.pageX;
                var mouseY = e.pageY;
                // 计算元素在视口中的距离
                var elementX = offset(wrap).left;
                var elementY = offset(wrap).top;
                // 计算鼠标在元素中的距离
                var resultX = mouseX - elementX - wrap.clientLeft - box.clientWidth / 2;
                var resultY = mouseY - elementY - wrap.clientTop - box.clientHeight / 2;
                if (resultX < 0) {
                    resultX = 0;
                } else if (resultX > wrap.clientWidth - box.clientWidth) {
                    resultX = wrap.clientWidth - box.clientWidth;
                }

                if (resultY < 0) {
                    resultY = 0;
                } else if (resultY > wrap.clientHeight - box.clientHeight) {
                    resultY = wrap.clientHeight - box.clientHeight;
                }
                box.style.left = resultX + "px";
                box.style.top = resultY + "px";
                bigArea.style.backgroundPositionX = -resultX / r + "px";
                bigArea.style.backgroundPositionY = -resultY / r + "px";

            }
        }
        wrap.onmouseleave = function () {
            box.style.display = "none";
            bigArea.style.display = "none";
        }
        function offset(dom) {
            // 返回一个对象
            var obj = {
                left: 0,
                top: 0
            }

            // 先让这个对象加上 dom的自己得到定位父元素的距离
            obj.left = dom.offsetLeft;
            obj.top = dom.offsetTop;
            // 判定浏览器是否是IE8 
            var isIE8 = window.navigator.userAgent.indexOf("MSIE 8") != -1;


            // 循环往上走 累加每一个offsetParent的offsetLeft和clientLeft 
            // 加每一个offsetParent的offsetTop和clientTop
            var offsetParent = dom.offsetParent;
            while (offsetParent != document.body) {
                if (isIE8) {
                    obj.left += offsetParent.offsetLeft;
                    obj.top += offsetParent.offsetTop;
                } else {
                    obj.left += offsetParent.offsetLeft + offsetParent.clientLeft;
                       obj.top += offsetParent.offsetTop + offsetParent.clientTop;
                }
                offsetParent = offsetParent.offsetParent;
            }
            return obj;
        }
    }
    addEvent() {
        var that = this;
        this.intro.addEventListener("click", function (eve) {
            if (eve.target.className == "tu up") {
                that.index = eve.target.parentNode.parentNode.parentNode.getAttribute("index");

                that.v = +eve.target.nextElementSibling.value + 1;
                // console.log(eve.target.nextElementSibling.value);
                that.value = that.v;
                that.goodss[0].sum = that.value;
                that.display();
            }
            if (eve.target.className == "tu down") {
                that.index = eve.target.parentNode.parentNode.parentNode.getAttribute("index");
                that.v2=+eve.target.previousElementSibling.value - 1;
                if(that.v2<0){
                    that.v2=0;
                }else{
                    that.value = that.v2;
                }
                
                that.goodss[0].sum = that.value;
                that.display();
            
            }
        })
    }
}

new Con({
    url: "http://localhost/xinhua/shop.json",
    intro: document.querySelector(".intro-t"),

})

